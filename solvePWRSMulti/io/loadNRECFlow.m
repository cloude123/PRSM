function [cam, ref, logName, flow2DGt, flow2DGt_noc, ImgLRGB] = ...
  loadNRECFlow(strFolder, nr, p)
% loads data from NREC Person Detection Dataset. Ground truth is filled
% with bogus data, since none is provided. strFolder is a string for the
% data parent directory. nr is a a 12 digit integer timestamp of the format
% yyyymmddhhmm (yyyy_mm_dd_hhmm in video name) that identifies each video 
% in the nrec dataset. p is a parameter struct used throughout the prsm
% code. p.subImg specifies which frames of the video to process, specified
% relatively. cam and ref contain camera parameter information and images. They are
% generated by generateStructures. logName is a string specifing the video
% found with the timestamp specified by nr. flow2DGt* are zero matrices,
% since no ground truth comes with this dataset. ImgLRGB is a uint8 rgb
% copy of the left image, useful for visualizing algorithm results.
%
%
% Note on p.subImg. On github, only 15 images are provided. If combined
% with full dataset, the frame number of these 15 images will change.
%
% “NREC Person Detection Dataset,” Agricultural Human Detection and
% Tracking, 2016. [Online]. Available:
% http://www.nrec.ri.cmu.edu/projects/usdapersondetection/.
% [Accessed: 19-Jul-2017].
%
% See also loadKittiFlow, run_pwrs_red, generateStructures


% If including more data from the NREC Dataset, extend this list
sets = {'val/negative'};
% Convert the video number into a timestamp in NREC format
nrString = num2str(nr);
nrString = [nrString(1:4),'_',nrString(5:6),'_',nrString(7:8)...
    ,'_',nrString(9:end),'*'];
% Search all sets for timestamp
found = 0;
for i = 1:numel(sets)
    logNames = dir(fullfile(strFolder,sets{i},nrString));
    if numel(logNames) == 1
        logPath = fullfile(sets{i},logNames(1).name);
        found = 1;
        break;
    end
end
if ~found
    error('Log Directory %s not found',nrString);
end
% Parse NREC style directory tree for images and calibration
[~,logName,~] = fileparts(logPath);
imageDir = fullfile(strFolder,logPath,'Images');
imagesLeft = dir(fullfile(imageDir,'Image_*_0_*.png'));
imagesLeft = {imagesLeft.name}';
imagesRight = dir(fullfile(imageDir,'Image_*_1_*.png'));
imagesRight = {imagesRight.name}';
calibFile = fullfile(strFolder,logPath, sprintf('%sCameraCalibration.txt',logName));
ImgL      = cell(1,2);
ImgR      = cell(1,2);

% Check date to determine if this is apple or orange data
% 2015 dates mean apple, which is at double frame rate, so skip every other
% frame
if str2double(logName(4)) == 5
    frameskip = 2;
else
    frameskip = 1;
end
index = 1 + (p.subImg-1) * frameskip;

% Load images as grayscale doubles
ImgLRGB = imread(fullfile(imageDir,imagesLeft{index}));
ImgL{1} = double(rgb2gray(ImgLRGB))/255;
ImgR{1} = double(rgb2gray(imread(fullfile(imageDir,imagesRight{index}))))/255;
ImgL{2} = double(rgb2gray(imread(fullfile(imageDir,imagesLeft{index + frameskip}))))/255;
ImgR{2} = double(rgb2gray(imread(fullfile(imageDir,imagesRight{index + frameskip}))))/255;




if p.subImg>1
  try
  ImgOld = cell(1,2);
  ImgOld{1} = double(rgb2gray(imread(fullfile(imageDir,imagesLeft{index - frameskip}))))/255;
  ImgOld{2} = double(rgb2gray(imread(fullfile(imageDir,imagesRight{index - frameskip}))))/255;
  cam.Iold = ImgOld;
  catch
    fprintf('Failed to load images: %s',fullfile(imageDir,imagesLeft{index - frameskip}) );
    fprintf('Failed to load images: %s',fullfile(imageDir,imagesRight{index - frameskip}) );
  end
end

data_supp = loadCalibrationKITTI_new( calibFile );
data_supp.I = ImgR;

% Fake GT, since none is provided
DispImg = zeros(size(ImgL{1}));
flowImg = repmat(DispImg, [1,1,3]);
flow2DGt_noc = cat (3, DispImg, flowImg);
flow2DGt     = cat (3, DispImg, flowImg);

[cam, ref] = generateStructures ( data_supp, ImgL, data_supp.R );


